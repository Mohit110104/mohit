1. DatabaseManager.java

import java.sql.*;

public class DatabaseManager {
    private static final String URL = "jdbc:sqlite:hotel.db";

    static {
        try {
            Class.forName("org.sqlite.JDBC");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL);
    }

    public static void initializeDatabase() {
        String roomsTable = "CREATE TABLE IF NOT EXISTS rooms (" +
                            "room_id INTEGER PRIMARY KEY, " +
                            "type TEXT NOT NULL, " +
                            "price REAL NOT NULL, " +
                            "availability INTEGER NOT NULL CHECK(availability IN (0,1)))";

        String reservationsTable = "CREATE TABLE IF NOT EXISTS reservations (" +
                                   "id INTEGER PRIMARY KEY AUTOINCREMENT, " +
                                   "guest_name TEXT NOT NULL, " +
                                   "room_id INTEGER NOT NULL, " +
                                   "check_in TEXT NOT NULL, " +
                                   "check_out TEXT NOT NULL, " +
                                   "FOREIGN KEY (room_id) REFERENCES rooms(room_id))";

        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement()) {
            stmt.execute(roomsTable);
            stmt.execute(reservationsTable);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

2. RoomManager.java

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class RoomManager {
    public static List<String> getAvailableRooms() {
        List<String> rooms = new ArrayList<>();
        String query = "SELECT room_id, type, price FROM rooms WHERE availability = 1";

        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                rooms.add("Room " + rs.getInt("room_id") + " - " + rs.getString("type") + " ($" + rs.getDouble("price") + ")");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return rooms;
    }

    public static boolean bookRoom(int roomId, String guestName, String checkIn, String checkOut) {
        String insertQuery = "INSERT INTO reservations (guest_name, room_id, check_in, check_out) VALUES (?, ?, ?, ?)";
        String updateQuery = "UPDATE rooms SET availability = 0 WHERE room_id = ?";

        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement stmt = conn.prepareStatement(insertQuery);
             PreparedStatement updateStmt = conn.prepareStatement(updateQuery)) {

            stmt.setString(1, guestName);
            stmt.setInt(2, roomId);
            stmt.setString(3, checkIn);
            stmt.setString(4, checkOut);
            int rowsInserted = stmt.executeUpdate();

            updateStmt.setInt(1, roomId);
            updateStmt.executeUpdate();

            return rowsInserted > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public static boolean cancelReservation(int roomId) {
        String deleteQuery = "DELETE FROM reservations WHERE room_id = ?";
        String updateQuery = "UPDATE rooms SET availability = 1 WHERE room_id = ?";

        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement stmt = conn.prepareStatement(deleteQuery);
             PreparedStatement updateStmt = conn.prepareStatement(updateQuery)) {

            stmt.setInt(1, roomId);
            int rowsDeleted = stmt.executeUpdate();

            updateStmt.setInt(1, roomId);
            updateStmt.executeUpdate();

            return rowsDeleted > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }
}

3. HotelBookingSystem.java

import java.util.List;
import java.util.Scanner;

public class HotelBookingSystem {
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        DatabaseManager.initializeDatabase();

        while (true) {
            System.out.println("\n===== Hotel Booking System =====");
            System.out.println("1. View Available Rooms");
            System.out.println("2. Book a Room");
            System.out.println("3. Cancel a Reservation");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1 -> viewRooms();
                case 2 -> bookRoom();
                case 3 -> cancelReservation();
                case 4 -> {
                    System.out.println("Exiting...");
                    return;
                }
                default -> System.out.println("Invalid choice! Please try again.");
            }
        }
    }

    private static void viewRooms() {
        List<String> rooms = RoomManager.getAvailableRooms();
        if (rooms.isEmpty()) {
            System.out.println("No rooms available.");
        } else {
            System.out.println("\nAvailable Rooms:");
            for (String room : rooms) {
                System.out.println(room);
            }
        }
    }

    private static void bookRoom() {
        System.out.print("Enter guest name: ");
        String name = scanner.nextLine();

        System.out.print("Enter room ID to book: ");
        int roomId = scanner.nextInt();
        scanner.nextLine();

        System.out.print("Enter check-in date (YYYY-MM-DD): ");
        String checkIn = scanner.nextLine();

        System.out.print("Enter check-out date (YYYY-MM-DD): ");
        String checkOut = scanner.nextLine();

        if (RoomManager.bookRoom(roomId, name, checkIn, checkOut)) {
            System.out.println("Room booked successfully!");
        } else {
            System.out.println("Failed to book room.");
        }
    }

    private static void cancelReservation() {
        System.out.print("Enter room ID to cancel reservation: ");
        int roomId = scanner.nextInt();
        scanner.nextLine();

        if (RoomManager.cancelReservation(roomId)) {
            System.out.println("Reservation cancelled successfully!");
        } else {
            System.out.println("No reservation found for this room.");
        }
    }
}

4. Running the Program
	1.	Compile:

javac -cp ".;sqlite-jdbc.jar" *.java


	2.	Run:

java -cp ".;sqlite-jdbc.jar" HotelBookingSystem
